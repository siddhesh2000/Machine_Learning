# -*- coding: utf-8 -*-
"""Medical insurance premium prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IMPJTer7fAiFrwPrBuplttihKkK4YluP

# Part 1: Data preprocessing

Dataset link: https://www.kaggle.com/mirichoi0218/insurance?select=insurance.csv

## Importing the libraries and dataset
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv('/content/insurance.csv')

"""## Data exploration"""

dataset.head()

dataset.shape

dataset.info()

dataset.select_dtypes(include='object').columns

len(dataset.select_dtypes(include='object').columns)

dataset.select_dtypes(include=['int64', 'float64']).columns

len(dataset.select_dtypes(include=['int64', 'float64']).columns)

# statistical summary
dataset.describe()

"""Group the dataset by 'sex', 'smoker', 'region'"""

dataset.groupby('sex').mean()

dataset.groupby('smoker').mean()

dataset.groupby('region').mean()

"""## Dealing with missing values"""

dataset.isnull().values.any()

dataset.isnull().values.sum()

"""## Encoding the categorical data"""

dataset.select_dtypes(include='object').columns

dataset['sex'].unique()

dataset['smoker'].unique()

dataset['region'].unique()

dataset.head()

# one hot encoding

dataset = pd.get_dummies(data=dataset, drop_first=True)

dataset.head()

dataset.shape

"""## Correlation matrix"""

dataset_2 = dataset.drop(columns='charges')

dataset_2.corrwith(dataset['charges']).plot.bar(
    figsize=(16,9), title='Correlation with Charges', rot=45, grid=True
)

corr = dataset.corr()

# heatmap
plt.figure(figsize=(16, 9))
sns.heatmap(corr, annot=True)

"""## Splitting the dataset"""

dataset.head()

# matrix of features / independent variables
x = dataset.drop(columns='charges')

# target / dependent variable
y = dataset['charges']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

x_train.shape

y_train.shape

x_test.shape

y_test.shape

"""## Feature scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

x_train

x_test

"""# Part 2: Building the model

## 1) Multiple linear regression
"""

from sklearn.linear_model import LinearRegression
regressor_lr = LinearRegression()
regressor_lr.fit(x_train, y_train)

y_pred = regressor_lr.predict(x_test)

from sklearn.metrics import  r2_score

r2_score(y_test, y_pred)

"""## 2) Random forest regression"""

from sklearn.ensemble import RandomForestRegressor
regressor_rf = RandomForestRegressor()
regressor_rf.fit(x_train, y_train)

y_pred = regressor_rf.predict(x_test)

r2_score(y_test, y_pred)

"""## 3) XGBoost regression"""

from xgboost import XGBRFRegressor
regressor_xgb = XGBRFRegressor()
regressor_xgb.fit(x_train, y_train)

y_pred = regressor_xgb.predict(x_test)

r2_score(y_test, y_pred)

"""# Part 3: Predict charges for a new customer

## example 1

Name: Frank, age: 40, sex: 1, bmi:45.50, children:4, smoker:1, region:northeast
"""

dataset.head()

frank_obs = [[40, 45.5, 4, 1, 1, 0, 0, 0]]

regressor_xgb.predict(sc.transform(frank_obs))

"""## Example 2

Name: Sara, age:19, bmi:27.9, children:0, sex:female, smoker:no, region: northwest
"""

dataset.head()

sara_obs = [[19, 27.9, 0, 0, 0, 1, 0, 0]]

sara_obs

regressor_xgb.predict(sc.transform(sara_obs))